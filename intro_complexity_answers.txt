1. Describe an analogy for relating an algorithm that has efficiency O(1)
and another algorithm that has O(2n).
		An analogy for relating an algorithm efficiency of O(1) to an efficiency O(2n) could be the speed of
		a Ferrari as O(1) vs. the speed of a golf cart as O(2n).

2. In plain English, what is the best case scenario for binary search?
		The best case scenario for a binary search would be if the item searched for were in the middle of the element
		because the item would be found in the first round.

3. In plain English, what is the worst-case scenario for binary search?
		The worst case scenario for binary search would be if the item being searched for was found during the very last
		iteration, OR if the item was never found because it was not in the list at all and had to run through every iteration.

4. In plain English, what is the bounded-case scenario for binary search?
		The bounded-case scenario for a binary search would be if the item were not directly in the middle (so it would not be
		found in the first round like in the best case scenario), but also not located in a position that would be found in the
		very last iteration (like in the worst-case scenario). It would fall between the two bounds.

5. Create a graph using the data below. Here's a CSV with the values you'll need.
		Graph created in loglinear_intro.numbers

6. What is the limit of the function above as n approaches infinity?
		The limit of the function as it approaches infinity is infinity.

7. What is the Big-O of an algorithm that has the data points above?
		O(2^n)

8. Write a Ruby method that takes a number n. This method must print the worst-case
number of iterations for linear search to find an item in collections of size one to n.
Use it to generate a table of worst-case iterations of collections up to size 10.
		Method and table created in linear_worst.rb

9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O
somewhere on the graph.
		Created in Linear Worst Case Graph.numbers

10. What is the Big-O of binary search?
		O(log n)

11. What is the Big-Ω of binary search?
		Ω(1)

12. What is the Big-Ө of binary search?
		Ө(log n)
